"""
M√≥dulo de UI espec√≠fico para Credimax.

Contiene componentes de interfaz espec√≠ficos para el flujo de Credimax.
"""

import streamlit as st
import pandas as pd
from datetime import datetime
from modules.ui.common_ui import (
    mostrar_estadisticas_generales, 
    mostrar_preview_datos,
    mostrar_configuracion_sms,
    crear_sidebar_configuracion,
    mostrar_metricas_procesamiento
)


def mostrar_sidebar_credimax():
    """
    Muestra la configuraci√≥n espec√≠fica de Credimax en la barra lateral.
    
    Returns:
        dict: Configuraci√≥n seleccionada
    """
    crear_sidebar_configuracion("Configuraci√≥n Credimax")
    
    # Configuraci√≥n autom√°tica de segmentaci√≥n (sin mostrar en UI)
    col_campana = "Campa√±a Growth"  # Columna fija
    
    # Configuraci√≥n de exportaci√≥n
    st.sidebar.subheader("1) Exportaci√≥n")
    exportar_zip = st.sidebar.checkbox(
        "Generar ZIP segmentado", 
        value=True,
        help="Genera archivo ZIP con segmentos por campa√±a"
    )
    
    # Configuraci√≥n de SMS
    sms_texto, sms_link = mostrar_configuracion_sms("2) Plantillas SMS")
    
    return {
        "col_campana": col_campana,
        "exportar_zip": exportar_zip,
        "sms_texto": sms_texto,
        "sms_link": sms_link
    }


def mostrar_resultados_credimax(df, config, resultados):
    """
    Muestra los resultados del procesamiento de Credimax.
    
    Args:
        df: DataFrame procesado
        config: Configuraci√≥n utilizada
        resultados: Resultados del procesamiento
    """
    # Estad√≠sticas generales
    mostrar_estadisticas_generales(df, "üìä Estad√≠sticas de Credimax")
    
    # Vista previa de datos
    mostrar_preview_datos(df, "üëÄ Vista Previa de Datos")
    
    # M√©tricas de procesamiento
    if "metricas" in resultados:
        mostrar_metricas_procesamiento(resultados["metricas"])
    
    # Resultados de segmentaci√≥n
    if config["exportar_zip"] and "zip_info" in resultados:
        st.subheader("üìÅ Archivos ZIP Generados")
        zip_info = resultados["zip_info"]
        st.success(f"‚úÖ Se generaron {len(zip_info['archivos'])} archivos segmentados")
        
        st.write("**Archivos por campa√±a:**")
        for archivo in zip_info["archivos"]:
            st.caption(f"‚Ä¢ {archivo}")
    
    # Resultados de SMS
    if config["sms_texto"] and config["sms_link"] and "sms_info" in resultados:
        st.subheader("üì± Plantillas SMS Generadas")
        sms_info = resultados["sms_info"]
        st.success(f"‚úÖ Se generaron {len(sms_info['archivos'])} plantillas SMS")
        
        st.write("**Plantillas por campa√±a:**")
        for archivo in sms_info["archivos"]:
            st.caption(f"‚Ä¢ {archivo}")
        
        if "enlace_acortado" in sms_info:
            st.caption(f"üîó **Enlace acortado**: {sms_info['enlace_acortado']}")


def mostrar_downloads_credimax(resultados, config):
    """
    Muestra las opciones de descarga para Credimax.
    
    Args:
        resultados: Resultados del procesamiento
        config: Configuraci√≥n utilizada
    """
    st.divider()
    st.subheader("‚¨áÔ∏è Descargas Disponibles")
    
    # Descarga de base limpia
    if "base_limpia" in resultados:
        st.download_button(
            "üìÑ Descargar Base Limpia",
            data=resultados["base_limpia"],
            file_name=f"Base_Credimax_LIMPIA_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        )
    
    # Descarga de comparativo
    if "comparativo" in resultados:
        st.download_button(
            "üìä Descargar Comparativo de Campa√±as",
            data=resultados["comparativo"],
            file_name=f"Base_Credimax_COMPARACION_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        )
    
    # Descarga de ZIP segmentado
    if config["exportar_zip"] and "zip_bytes" in resultados:
        st.download_button(
            "üì¶ Descargar ZIP Segmentado",
            data=resultados["zip_bytes"],
            file_name=f"Credimax_Segmentado_{datetime.now().strftime('%Y%m%d_%H%M')}.zip",
            mime="application/zip",
        )
    
    # Descarga de plantillas SMS
    if config["sms_texto"] and config["sms_link"] and "sms_bytes" in resultados:
        st.download_button(
            "üì± Descargar Plantillas SMS",
            data=resultados["sms_bytes"],
            file_name=f"SMS_Credimax_Segmentado_{datetime.now().strftime('%Y%m%d_%H%M')}.zip",
            mime="application/zip",
        )


def mostrar_validaciones_credimax(df):
    """
    Muestra validaciones espec√≠ficas de Credimax.
    
    Args:
        df: DataFrame a validar
    """
    st.subheader("üîç Validaciones de Credimax")
    
    # Validaci√≥n de columnas requeridas
    columnas_requeridas = [
        "MIS", "CEDULA", "FECHA NACIMIENTO", "primer_nombre", 
        "CELULAR", "CORREO CLIENTE", "CUPO", "Tasa"
    ]
    
    columnas_faltantes = [col for col in columnas_requeridas if col not in df.columns]
    
    if columnas_faltantes:
        st.warning(f"‚ö†Ô∏è Columnas faltantes: {', '.join(columnas_faltantes)}")
    else:
        st.success("‚úÖ Todas las columnas requeridas est√°n presentes")
    
    # Validaci√≥n de c√©dulas
    if "CEDULA" in df.columns:
        cedulas_validas = df["CEDULA"].apply(lambda x: len(str(x).replace(".", "").replace("-", "")) == 10).sum()
        total_cedulas = len(df)
        st.metric("C√©dulas V√°lidas", f"{cedulas_validas}/{total_cedulas}")
    
    # Validaci√≥n de celulares
    if "CELULAR" in df.columns:
        celulares_validos = df["CELULAR"].apply(lambda x: len(str(x).replace("-", "").replace(" ", "")) == 10).sum()
        total_celulares = len(df)
        st.metric("Celulares V√°lidos", f"{celulares_validos}/{total_celulares}")


def mostrar_progreso_credimax(etapa, total=5):
    """
    Muestra el progreso del procesamiento de Credimax.
    
    Args:
        etapa: Etapa actual
        total: Total de etapas
    """
    etapas = [
        "Cargando datos...",
        "Validando columnas...",
        "Aplicando limpiezas...",
        "Generando segmentaci√≥n...",
        "Creando archivos de salida..."
    ]
    
    if etapa <= len(etapas):
        st.info(f"üîÑ {etapas[etapa-1]}")
        st.progress(etapa / total)
