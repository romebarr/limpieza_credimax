"""
M√≥dulo de UI espec√≠fico para Bankard.

Contiene componentes de interfaz espec√≠ficos para el flujo de Bankard.
"""

import streamlit as st
import pandas as pd
from datetime import datetime
from modules.ui.common_ui import (
    mostrar_estadisticas_generales, 
    mostrar_preview_datos,
    mostrar_configuracion_sms,
    crear_sidebar_configuracion,
    mostrar_metricas_procesamiento,
    mostrar_errores_archivo
)


def mostrar_sidebar_bankard():
    """
    Muestra la configuraci√≥n espec√≠fica de Bankard en la barra lateral.
    
    Returns:
        dict: Configuraci√≥n seleccionada
    """
    crear_sidebar_configuracion("Configuraci√≥n Bankard")
    
    # Valores por defecto (se detectan autom√°ticamente en el procesamiento)
    col_tipo = "TIPO "  # Valor por defecto
    col_exclusion = "exclusion"  # Valor por defecto
    
    # Configuraci√≥n de exportaci√≥n
    st.sidebar.subheader("1) Exportaci√≥n")
    exportar_zip = st.sidebar.checkbox(
        "Generar ZIP segmentado", 
        value=True,
        help="Genera archivo ZIP con segmentos por tipo"
    )
    
    # Configuraci√≥n de SMS
    sms_texto, sms_link = mostrar_configuracion_sms("2) Plantillas SMS")
    
    return {
        "col_tipo": col_tipo,
        "col_exclusion": col_exclusion,
        "exportar_zip": exportar_zip,
        "sms_texto": sms_texto,
        "sms_link": sms_link
    }


def mostrar_exclusiones_bankard(exclusiones_info):
    """
    Muestra informaci√≥n sobre las exclusiones de Bankard.
    
    Args:
        exclusiones_info: Informaci√≥n sobre exclusiones
    """
    st.subheader("üö´ Gesti√≥n de Exclusiones")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("C√©dulas Excluidas", exclusiones_info.get("total_excluidas", 0))
    
    with col2:
        st.metric("Archivos Procesados", exclusiones_info.get("archivos_procesados", 0))
    
    with col3:
        ultima_actualizacion = exclusiones_info.get("ultima_actualizacion", "N/A")
        st.metric("√öltima Actualizaci√≥n", ultima_actualizacion)
    
    # Mostrar errores si los hay
    if "errores" in exclusiones_info and exclusiones_info["errores"]:
        mostrar_errores_archivo(exclusiones_info["errores"], "Errores en Exclusiones")


# Funci√≥n desactivada - La correcci√≥n de BINs se muestra en la secci√≥n de procesamiento
# def mostrar_bins_bankard(bins_info):
#     """
#     Muestra informaci√≥n sobre la correcci√≥n de BINs.
#     
#     Args:
#         bins_info: Informaci√≥n sobre BINs
#     """
#     st.subheader("üîß Correcci√≥n de BINs")
#     
#     if "bins_problematicos" in bins_info and bins_info["bins_problematicos"]:
#         st.warning(f"‚ö†Ô∏è Se encontraron {len(bins_info['bins_problematicos'])} BINs problem√°ticos")
#         
#         # Mostrar BINs problem√°ticos
#         with st.expander("Ver BINs problem√°ticos"):
#             for bin_problema in bins_info["bins_problematicos"]:
#                 st.write(f"‚Ä¢ {bin_problema}")
#         
#         # Mostrar sugerencias si est√°n disponibles
#         if "sugerencias" in bins_info and bins_info["sugerencias"]:
#             st.info("üí° Sugerencias autom√°ticas disponibles")
#             for bin_problema, sugerencias in bins_info["sugerencias"].items():
#                 with st.expander(f"Sugerencias para: {bin_problema}"):
#                     for sugerencia in sugerencias:
#                         st.write(f"‚Ä¢ {sugerencia}")
#     else:
#         st.success("‚úÖ Todos los BINs son v√°lidos")


def mostrar_resultados_bankard(df, config, resultados):
    """
    Muestra los resultados del procesamiento de Bankard.
    
    Args:
        df: DataFrame procesado
        config: Configuraci√≥n utilizada
        resultados: Resultados del procesamiento
    """
    # Estad√≠sticas generales
    mostrar_estadisticas_generales(df, "üìä Estad√≠sticas de Bankard")
    
    # Informaci√≥n de exclusiones
    if "exclusiones" in resultados:
        mostrar_exclusiones_bankard(resultados["exclusiones"])
    
    # Vista previa de datos
    mostrar_preview_datos(df, "üëÄ Vista Previa de Datos")
    
    # M√©tricas de procesamiento
    if "metricas" in resultados:
        mostrar_metricas_procesamiento(resultados["metricas"])
    
    # Resultados de segmentaci√≥n
    if config["exportar_zip"] and "zip_info" in resultados:
        st.subheader("üìÅ Archivos ZIP Generados")
        zip_info = resultados["zip_info"]
        st.success(f"‚úÖ Se generaron {len(zip_info['archivos'])} archivos segmentados")
        
        st.write("**Archivos por tipo:**")
        for archivo in zip_info["archivos"]:
            st.caption(f"‚Ä¢ {archivo}")
    
    # Resultados de SMS
    if config["sms_texto"] and config["sms_link"] and "sms_info" in resultados:
        st.subheader("üì± Plantillas SMS Generadas")
        sms_info = resultados["sms_info"]
        st.success(f"‚úÖ Se generaron {len(sms_info['archivos'])} plantillas SMS")
        
        st.write("**Plantillas por tipo:**")
        for archivo in sms_info["archivos"]:
            st.caption(f"‚Ä¢ {archivo}")
        
        if "enlace_acortado" in sms_info:
            st.caption(f"üîó **Enlace acortado**: {sms_info['enlace_acortado']}")


def mostrar_downloads_bankard(resultados, config):
    """
    Muestra las opciones de descarga para Bankard.
    
    Args:
        resultados: Resultados del procesamiento
        config: Configuraci√≥n utilizada
    """
    st.divider()
    st.subheader("‚¨áÔ∏è Descargas Disponibles")
    
    # Descarga de base limpia
    if "base_limpia" in resultados:
        st.download_button(
            "üìÑ Descargar Base Limpia",
            data=resultados["base_limpia"],
            file_name=f"Bankard_General_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        )
    
    # Descarga de ZIP segmentado
    if config["exportar_zip"] and "zip_bytes" in resultados:
        st.download_button(
            "üì¶ Descargar ZIP Segmentado",
            data=resultados["zip_bytes"],
            file_name=f"Bankard_Segmentado_{datetime.now().strftime('%Y%m%d_%H%M')}.zip",
            mime="application/zip",
        )
    
    # Descarga de plantillas SMS
    if config["sms_texto"] and config["sms_link"] and "sms_bytes" in resultados:
        st.download_button(
            "üì± Descargar Plantillas SMS",
            data=resultados["sms_bytes"],
            file_name=f"SMS_Bankard_Segmentado_{datetime.now().strftime('%Y%m%d_%H%M')}.zip",
            mime="application/zip",
        )


def mostrar_validaciones_bankard(df):
    """
    Muestra validaciones espec√≠ficas de Bankard.
    
    Args:
        df: DataFrame a validar
    """
    st.subheader("üîç Validaciones de Bankard")
    
    # Validaci√≥n de columnas requeridas
    columnas_requeridas = [
        "primer_nombre", "telefono", "cedula", "cupo", "BIN"
    ]
    
    columnas_faltantes = [col for col in columnas_requeridas if col not in df.columns]
    
    if columnas_faltantes:
        st.warning(f"‚ö†Ô∏è Columnas faltantes: {', '.join(columnas_faltantes)}")
    else:
        st.success("‚úÖ Todas las columnas requeridas est√°n presentes")
    
    # Validaci√≥n de tel√©fonos
    if "telefono" in df.columns:
        telefonos_validos = df["telefono"].apply(lambda x: len(str(x).replace("-", "").replace(" ", "")) == 10).sum()
        total_telefonos = len(df)
        st.metric("Tel√©fonos V√°lidos", f"{telefonos_validos}/{total_telefonos}")
    
    # Validaci√≥n de c√©dulas
    if "cedula" in df.columns:
        cedulas_validas = df["cedula"].apply(lambda x: len(str(x).replace(".", "").replace("-", "")) == 10).sum()
        total_cedulas = len(df)
        st.metric("C√©dulas V√°lidas", f"{cedulas_validas}/{total_cedulas}")
    
    # Validaci√≥n de BINs
    if "BIN" in df.columns:
        bins_validos = df["BIN"].isin([
            "Visa Oro", "Visa Platinum", "Mastercard Black", "Mastercard Cl√°sica",
            "Mastercard Oro", "Visa Cl√°sica", "Visa Infinite", "Visa Signature"
        ]).sum()
        total_bins = len(df)
        st.metric("BINs V√°lidos", f"{bins_validos}/{total_bins}")


def mostrar_progreso_bankard(etapa, total=6):
    """
    Muestra el progreso del procesamiento de Bankard.
    
    Args:
        etapa: Etapa actual
        total: Total de etapas
    """
    etapas = [
        "Cargando datos...",
        "Procesando exclusiones...",
        "Corrigiendo BINs...",
        "Aplicando limpiezas...",
        "Generando segmentaci√≥n...",
        "Creando archivos de salida..."
    ]
    
    if etapa <= len(etapas):
        st.info(f"üîÑ {etapas[etapa-1]}")
        st.progress(etapa / total)
