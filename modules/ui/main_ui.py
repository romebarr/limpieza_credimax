"""
M√≥dulo de UI principal para la aplicaci√≥n.

Contiene la configuraci√≥n principal y navegaci√≥n de la interfaz.
"""

import streamlit as st
from modules.ui.common_ui import mostrar_info_configuracion


def configurar_pagina():
    """
    Configura la p√°gina principal de Streamlit.
    """
    st.set_page_config(
        page_title="Limpieza Credimax ‚Äì SM Growth Lab", 
        layout="wide",
        initial_sidebar_state="expanded"
    )


def mostrar_header():
    """
    Muestra el encabezado principal de la aplicaci√≥n.
    """
    st.title("üßπ Limpieza y Exportaci√≥n ‚Äì Credimax & Bankard")
    st.caption(
        "Sube la base correspondiente, aplicamos validaciones/normalizaciones y preparamos las "
        "descargas segmentadas seg√∫n las reglas de cada flujo."
    )


def mostrar_selector_flujo():
    """
    Muestra el selector de flujo en la barra lateral.
    
    Returns:
        str: Flujo seleccionado ('credimax' o 'bankard')
    """
    st.sidebar.header("üöÄ Seleccionar Flujo")
    
    flujo = st.sidebar.radio(
        "¬øQu√© base quieres procesar?",
        ["Credimax", "Bankard"],
        help="Selecciona el tipo de base de datos a procesar"
    )
    
    return flujo.lower()


def mostrar_info_flujo(flujo):
    """
    Muestra informaci√≥n espec√≠fica del flujo seleccionado.
    
    Args:
        flujo: Flujo seleccionado ('credimax' o 'bankard')
    """
    if flujo == "credimax":
        st.info("""
        **üè¶ Flujo Credimax:**
        - Validaci√≥n de c√©dulas, celulares y nombres
        - Segmentaci√≥n autom√°tica por campa√±a
        - Generaci√≥n de plantillas SMS personalizables
        - Exportaci√≥n segmentada por campa√±a
        """)
    elif flujo == "bankard":
        st.info("""
        **üèõÔ∏è Flujo Bankard:**
        - Sistema inteligente de correcci√≥n de BINs
        - Gesti√≥n consolidada de exclusiones
        - Filtrado por vigencia
        - Generaci√≥n de plantillas SMS por tipo de tarjeta
        """)


def mostrar_uploader_archivo(flujo):
    """
    Muestra el uploader de archivos espec√≠fico para cada flujo.
    
    Args:
        flujo: Flujo seleccionado ('credimax' o 'bankard')
        
    Returns:
        UploadedFile: Archivo subido o None
    """
    if flujo == "credimax":
        archivo = st.file_uploader(
            "üìÅ Subir base de Credimax",
            type=["xlsx", "xls"],
            help="Sube un archivo Excel con la base de Credimax"
        )
    elif flujo == "bankard":
        archivo = st.file_uploader(
            "üìÅ Subir base de Bankard",
            type=["xlsx", "xls"],
            help="Sube un archivo Excel con la base de Bankard"
        )
    else:
        archivo = None
    
    return archivo


def mostrar_uploader_exclusiones():
    """
    Muestra el uploader de archivos de exclusiones (solo para Bankard).
    
    Returns:
        list: Lista de archivos de exclusiones subidos
    """
    st.sidebar.subheader("üìã Archivos de Exclusi√≥n")
    
    exclusion_files = st.sidebar.file_uploader(
        "Subir archivos de exclusi√≥n",
        type=["xlsx", "xls"],
        accept_multiple_files=True,
        help="Sube archivos Excel con c√©dulas a excluir (columna IDENTIFICACION)"
    )
    
    return exclusion_files


def mostrar_estado_procesamiento(estado, mensaje=""):
    """
    Muestra el estado actual del procesamiento.
    
    Args:
        estado: Estado del procesamiento ('cargando', 'procesando', 'completado', 'error')
        mensaje: Mensaje adicional a mostrar
    """
    if estado == "cargando":
        st.info("üì• Cargando archivo...")
    elif estado == "procesando":
        st.info(f"üîÑ Procesando datos... {mensaje}")
    elif estado == "completado":
        st.success(f"‚úÖ Procesamiento completado! {mensaje}")
    elif estado == "error":
        st.error(f"‚ùå Error en el procesamiento: {mensaje}")


def mostrar_sidebar_info():
    """
    Muestra informaci√≥n adicional en la barra lateral.
    """
    st.sidebar.divider()
    st.sidebar.markdown("### ‚ÑπÔ∏è Informaci√≥n")
    st.sidebar.markdown("""
    **Versi√≥n:** 2.0.0  
    **Equipo:** SM Growth Lab  
    **√öltima actualizaci√≥n:** 2024
    """)
    
    # Enlaces removidos de la interfaz - solo en documentaci√≥n


def limpiar_cache():
    """
    Limpia el cache de Streamlit si es necesario.
    """
    if st.button("üßπ Limpiar Cache", help="Limpia el cache de la aplicaci√≥n"):
        st.cache_data.clear()
        st.rerun()


def mostrar_footer():
    """
    Muestra el pie de p√°gina de la aplicaci√≥n.
    """
    st.divider()
    st.markdown("""
    <div style='text-align: center; color: #666; font-size: 0.8em;'>
        <p>Desarrollado por <strong>SM Growth Lab</strong></p>
    </div>
    """, unsafe_allow_html=True)
