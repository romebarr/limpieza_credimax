"""
M√≥dulo de asignaci√≥n autom√°tica de campa√±as para Credimax.

Contiene la l√≥gica para asignar autom√°ticamente la columna 'Campa√±a Growth'
seg√∫n las reglas de negocio definidas, con sistema de aprendizaje de nuevas
combinaciones.
"""

import pandas as pd
import streamlit as st
import json
import os
from pathlib import Path


# Ruta al archivo de memoria de reglas personalizadas
MEMORIA_REGLAS_CAMPANAS = "memoria_reglas_campanas.json"


def cargar_memoria_reglas():
    """
    Carga la memoria de reglas personalizadas desde el archivo JSON.
    
    Returns:
        dict: Diccionario con reglas personalizadas {combinacion: campana}
    """
    if os.path.exists(MEMORIA_REGLAS_CAMPANAS):
        try:
            with open(MEMORIA_REGLAS_CAMPANAS, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Error al cargar memoria de reglas: {e}")
            return {}
    return {}


def guardar_memoria_reglas(memoria):
    """
    Guarda la memoria de reglas personalizadas en el archivo JSON.
    
    Args:
        memoria: Diccionario con reglas personalizadas
    """
    try:
        with open(MEMORIA_REGLAS_CAMPANAS, "w", encoding="utf-8") as f:
            json.dump(memoria, f, ensure_ascii=False, indent=2)
    except Exception as e:
        st.error(f"‚ùå Error al guardar memoria de reglas: {e}")


def crear_clave_combinacion(canal, producto, segmento, testeo):
    """
    Crea una clave √∫nica para identificar una combinaci√≥n de atributos.
    
    Args:
        canal: Valor del canal
        producto: Valor del producto
        segmento: Valor del segmento
        testeo: Valor del testeo de cuota
        
    Returns:
        str: Clave √∫nica para la combinaci√≥n
    """
    return f"{canal}|{producto}|{segmento}|{testeo}"


def parsear_clave_combinacion(clave):
    """
    Parsea una clave de combinaci√≥n en sus componentes.
    
    Args:
        clave: Clave de combinaci√≥n
        
    Returns:
        tuple: (canal, producto, segmento, testeo)
    """
    partes = clave.split("|")
    if len(partes) == 4:
        return tuple(partes)
    return ("", "", "", "")


def detectar_casos_sin_regla(df):
    """
    Detecta registros que no tienen una regla de asignaci√≥n definida.
    
    Args:
        df: DataFrame con datos de Credimax
        
    Returns:
        tuple: (DataFrame con casos sin regla, dict con combinaciones √∫nicas)
    """
    # Columnas necesarias
    columnas_requeridas = ["CANAL", "Producto", "SEGMENTO", "TESTEO CUOTA", "Campa√±a Growth"]
    
    # Verificar que existen las columnas
    for col in columnas_requeridas:
        if col not in df.columns:
            return pd.DataFrame(), {}
    
    # Filtrar casos sin campa√±a asignada (vac√≠os)
    casos_sin_regla = df[df["Campa√±a Growth"] == ""].copy()
    
    if casos_sin_regla.empty:
        return casos_sin_regla, {}
    
    # Identificar combinaciones √∫nicas
    combinaciones = {}
    for _, row in casos_sin_regla.iterrows():
        canal = str(row.get("CANAL", "")).strip().upper()
        producto = str(row.get("Producto", "")).strip().upper()
        segmento = str(row.get("SEGMENTO", "")).strip().upper()
        testeo = str(row.get("TESTEO CUOTA", "")).strip().upper()
        
        clave = crear_clave_combinacion(canal, producto, segmento, testeo)
        
        if clave not in combinaciones:
            combinaciones[clave] = {
                "CANAL": canal,
                "Producto": producto,
                "SEGMENTO": segmento,
                "TESTEO CUOTA": testeo,
                "count": 0
            }
        combinaciones[clave]["count"] += 1
    
    return casos_sin_regla, combinaciones


def mostrar_interfaz_reglas_interactiva(combinaciones_sin_regla, memoria_reglas):
    """
    Muestra una interfaz interactiva para que el usuario asigne campa√±as a
    combinaciones que no tienen regla definida.
    
    Args:
        combinaciones_sin_regla: Dict con combinaciones sin regla
        memoria_reglas: Dict con reglas personalizadas existentes
        
    Returns:
        dict: Nuevas reglas asignadas por el usuario
    """
    if not combinaciones_sin_regla:
        return {}
    
    st.warning(f"‚ö†Ô∏è Se encontraron {len(combinaciones_sin_regla)} combinaciones sin regla de asignaci√≥n")
    st.info("üëá Por favor, asigna la campa√±a correspondiente a cada combinaci√≥n. Estas reglas se guardar√°n para futuras ejecuciones.")
    
    nuevas_reglas = {}
    
    # Campa√±as disponibles (opciones para el usuario)
    campanas_disponibles = [
        "",  # Opci√≥n vac√≠a por defecto
        "Credimax Online No Clientes Afluente",
        "Credimax Online No Clientes Masivo",
        "Credimax Online Elite",
        "Credimax Online Premium",
        "Credimax Online Masivo Cuotas",
        "Credimax Online Masivo",
        "Otra (especificar)"
    ]
    
    for idx, (clave, info) in enumerate(combinaciones_sin_regla.items()):
        st.divider()
        
        # Mostrar informaci√≥n de la combinaci√≥n
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.markdown(f"**Combinaci√≥n {idx + 1}** ({info['count']} registros)")
            st.markdown(f"""
            - **Canal**: `{info['CANAL']}`
            - **Producto**: `{info['Producto']}`
            - **Segmento**: `{info['SEGMENTO']}`
            - **Testeo Cuota**: `{info['TESTEO CUOTA']}`
            """)
        
        with col2:
            st.metric("Registros", info['count'])
        
        # Selector de campa√±a
        campana_seleccionada = st.selectbox(
            "Selecciona la campa√±a para esta combinaci√≥n:",
            options=campanas_disponibles,
            key=f"campana_{clave}",
            help="Esta regla se guardar√° para futuras ejecuciones"
        )
        
        # Si selecciona "Otra", mostrar input de texto
        if campana_seleccionada == "Otra (especificar)":
            campana_personalizada = st.text_input(
                "Especifica el nombre de la campa√±a:",
                key=f"campana_custom_{clave}",
                placeholder="Ej: Credimax Online Nueva Campa√±a"
            )
            if campana_personalizada.strip():
                nuevas_reglas[clave] = campana_personalizada.strip()
        elif campana_seleccionada:
            nuevas_reglas[clave] = campana_seleccionada
    
    # Bot√≥n para guardar reglas
    if nuevas_reglas:
        st.divider()
        if st.button("üíæ Guardar Reglas en Memoria", type="primary"):
            # Actualizar memoria
            memoria_reglas.update(nuevas_reglas)
            guardar_memoria_reglas(memoria_reglas)
            st.success(f"‚úÖ Se guardaron {len(nuevas_reglas)} nuevas reglas en la memoria")
            st.rerun()
    
    return nuevas_reglas


def aplicar_reglas_personalizadas(df, memoria_reglas):
    """
    Aplica reglas personalizadas almacenadas en la memoria.
    
    Args:
        df: DataFrame con datos de Credimax
        memoria_reglas: Dict con reglas personalizadas
        
    Returns:
        DataFrame: DataFrame con reglas personalizadas aplicadas
    """
    if not memoria_reglas:
        return df
    
    # Preparar columnas
    canal_n = df["CANAL"].fillna("").astype(str).str.strip().str.upper()
    prod_n = df["Producto"].fillna("").astype(str).str.strip().str.upper()
    seg_n = df["SEGMENTO"].fillna("").astype(str).str.strip().str.upper()
    test_n = df["TESTEO CUOTA"].fillna("").astype(str).str.strip().str.upper()
    
    # Aplicar cada regla personalizada
    registros_aplicados = 0
    for clave, campana in memoria_reglas.items():
        canal, producto, segmento, testeo = parsear_clave_combinacion(clave)
        
        # Crear m√°scara para esta combinaci√≥n
        mask = (
            (canal_n == canal) &
            (prod_n == producto) &
            (seg_n == segmento) &
            (test_n == testeo)
        )
        
        # Aplicar solo a registros que a√∫n no tienen campa√±a asignada
        mask_sin_campana = (df["Campa√±a Growth"] == "")
        mask_final = mask & mask_sin_campana
        
        if mask_final.any():
            df.loc[mask_final, "Campa√±a Growth"] = campana
            registros_aplicados += mask_final.sum()
    
    if registros_aplicados > 0:
        st.info(f"‚ÑπÔ∏è Se aplicaron {registros_aplicados} reglas personalizadas desde la memoria")
    
    return df


def mostrar_estado_memoria_reglas(memoria_reglas):
    """
    Muestra el estado actual de la memoria de reglas personalizadas.
    
    Args:
        memoria_reglas: Dict con reglas personalizadas
    """
    if memoria_reglas:
        with st.expander(f"üìã Memoria de Reglas Personalizadas ({len(memoria_reglas)} reglas guardadas)"):
            for clave, campana in memoria_reglas.items():
                canal, producto, segmento, testeo = parsear_clave_combinacion(clave)
                st.markdown(f"""
                **{campana}**
                - Canal: `{canal}` | Producto: `{producto}` | Segmento: `{segmento}` | Testeo: `{testeo}`
                """)


def asignar_campanas_automaticamente(df):
    """
    Asigna autom√°ticamente la columna 'Campa√±a Growth' seg√∫n reglas de negocio.
    
    Reglas:
    - Canal: ONLINE
    - Producto: No Clientes vs Clientes
    - Segmento: Afluente (ELITE/PREMIUM) vs Masivo (SILVER/PRESTIGE)
    - Testeo de Cuotas: SI/NO
    
    Args:
        df: DataFrame con datos de Credimax
        
    Returns:
        DataFrame: DataFrame con columna 'Campa√±a Growth' asignada
    """
    # Guardar valor original si existe
    if "Campa√±a Growth" in df.columns:
        df["Campa√±a Growth Original"] = df["Campa√±a Growth"]
    else:
        df["Campa√±a Growth Original"] = ""
    
    # Verificar que existen las columnas necesarias
    columnas_requeridas = ["CANAL", "Producto", "SEGMENTO", "TESTEO CUOTA"]
    columnas_faltantes = [col for col in columnas_requeridas if col not in df.columns]
    
    if columnas_faltantes:
        st.warning(f"‚ö†Ô∏è Columnas faltantes para asignaci√≥n autom√°tica: {', '.join(columnas_faltantes)}")
        st.info("‚ÑπÔ∏è Se mantendr√°n los valores existentes de 'Campa√±a Growth' o se asignar√° valor vac√≠o")
        
        # Si no hay columna Campa√±a Growth, crear una vac√≠a
        if "Campa√±a Growth" not in df.columns:
            df["Campa√±a Growth"] = ""
        
        # Retornar estad√≠sticas vac√≠as
        estadisticas = {
            "No Clientes Afluente": 0,
            "No Clientes Masivo": 0,
            "Elite": 0,
            "Premium": 0,
            "Masivo Cuotas": 0,
            "Masivo Sin Cuotas": 0,
        }
        return df, estadisticas
    
    # Preparar columnas necesarias
    canal_n = df["CANAL"].fillna("").astype(str).str.strip().str.upper()
    prod_n = df["Producto"].fillna("").astype(str).str.strip().str.upper()
    seg_n = df["SEGMENTO"].fillna("").astype(str).str.strip().str.upper()
    test_n = df["TESTEO CUOTA"].fillna("").astype(str).str.strip().str.upper()
    
    # Definir m√°scaras b√°sicas
    is_online = canal_n == "ONLINE"
    is_no_cli = prod_n.str.contains("NO CLIENTES", na=False, case=False)
    is_afluente = seg_n.isin({"ELITE", "PREMIUM"})
    is_masivo = seg_n.isin({"SILVER", "PRESTIGE"})
    test_es_si = test_n.isin({"SI", "1", "TRUE", "X"})
    
    # Crear columna de campa√±a
    camp_final = pd.Series("", index=df.index, dtype="object")
    
    # Aplicar reglas de segmentaci√≥n
    mask_no_cli_afl = is_online & is_no_cli & is_afluente
    mask_no_cli_mas = is_online & is_no_cli & is_masivo
    mask_online_otros = is_online & (~is_no_cli)
    mask_elite = mask_online_otros & (seg_n == "ELITE")
    mask_premium = mask_online_otros & (seg_n == "PREMIUM")
    mask_masivo_base = mask_online_otros & is_masivo
    mask_masivo_cuotas = mask_masivo_base & test_es_si
    mask_masivo_sin_cuotas = mask_masivo_base & (~test_es_si)
    
    # Asignar campa√±as
    camp_final.loc[mask_no_cli_afl] = "Credimax Online No Clientes Afluente"
    camp_final.loc[mask_no_cli_mas] = "Credimax Online No Clientes Masivo"
    camp_final.loc[mask_elite] = "Credimax Online Elite"
    camp_final.loc[mask_premium] = "Credimax Online Premium"
    camp_final.loc[mask_masivo_cuotas] = "Credimax Online Masivo Cuotas"
    camp_final.loc[mask_masivo_sin_cuotas] = "Credimax Online Masivo"
    
    # Asignar al DataFrame
    df["Campa√±a Growth"] = camp_final
    
    # Estad√≠sticas de asignaci√≥n
    estadisticas = {
        "No Clientes Afluente": int(mask_no_cli_afl.sum()),
        "No Clientes Masivo": int(mask_no_cli_mas.sum()),
        "Elite": int(mask_elite.sum()),
        "Premium": int(mask_premium.sum()),
        "Masivo Cuotas": int(mask_masivo_cuotas.sum()),
        "Masivo Sin Cuotas": int(mask_masivo_sin_cuotas.sum()),
    }
    
    return df, estadisticas


def mostrar_estadisticas_campanas(estadisticas):
    """
    Muestra las estad√≠sticas de asignaci√≥n de campa√±as.
    
    Args:
        estadisticas: Diccionario con estad√≠sticas de asignaci√≥n
    """
    st.subheader("üß† Asignaci√≥n Autom√°tica de Campa√±as")
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("No Clientes Afluente", estadisticas.get("No Clientes Afluente", 0))
        st.metric("Masivo Sin Cuotas", estadisticas.get("Masivo Sin Cuotas", 0))
    with col2:
        st.metric("No Clientes Masivo", estadisticas.get("No Clientes Masivo", 0))
        st.metric("Elite", estadisticas.get("Elite", 0))
    with col3:
        st.metric("Masivo Cuotas", estadisticas.get("Masivo Cuotas", 0))
        st.metric("Premium", estadisticas.get("Premium", 0))

